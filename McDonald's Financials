import numpy as np             # linear algebra
import pandas as pd            # data processing
import matplotlib.pylab as plt          # visualizations that can be fine tuned 
import seaborn as sns          # visualizations that are more complex
plt.style.use('ggplot')        # setting the plotting style
pd.set_option('max_columns', 200)       # because pandas limits the number shown


# read/open the dataset using pd (pandas)
df = pd.read_csv('/kaggle/input/mcdonalds-financial-statements-2002-2022/McDonalds_Financial_Statements.csv')
    

# To understand the dataset, an overview
   df.shape           #(rows, columns)   
   df.head()          # to show a certain number of rows. default is 5 but can adjust
   df.columns         # to see the list of columns
   df.dtypes          # to see the object type in each column
   df.describe ()     # gives us the basic stats (mean, median, etc.) per column

# to prepare the data

# cleaning
    df.drop(['#specify name of column to drop']. axis=1, inplace=True)               # removes specified column, axis 0=row 1=column,inplace True=modify same df False=creates new df
    df = df[['Year', #'Market cap ($B)',                                             # every column with '#' is removed
         'Revenue ($B)', 
         'Earnings ($B)', #'P/E ratio',
       #'P/S ratio', #'P/B ratio', #'Operating Margin (%)', #'EPS ($)',
       #'Shares Outstanding ($B)', 
         'Cash on Hand ($B)', 
         'Dividend Yield (%)',
       #'Dividend (stock split adjusted) ($)', 
         'Net assets ($B)',
         'Total assets ($B)', 
         'Total debt ($B)', 
         'Total liabilities ($B)']].copy()                                              

# data type conversion
    df['Earnings ($B)'] = pd.to_numeric(df['Earnings ($B)'])                    # assuming the 'Earnings' column was in any other data type and we want to make it float

# renaming
    df = df.rename(columns={'Revenue ($B)': 'Revenue',                            # rewriting the df as the renamed df
                  'Earnings ($B)':'Earnings',                                    # removing spaces and symbols
                  'Cash on Hand ($B)':'Cash_On_Hand', 
                  'Dividend Yield (%)':'Dividend_Yield',
                  'Net assets ($B)': 'Net_Assets',
                  'Total assets ($B)':'Total_Assets',
                  'Total debt ($B)':'Total_Debt',
                  'Total liabilities ($B)':'Total_Liabilities'})

# checking for empty spaces
    df.isna().sum()                        # this will return number of empties per column

# checking for duplicates
    df.duplicated()                                          # true or false
    df.loc[df.duplicated()]                                  # locates the duplicates
    df.loc[df.duplicated(subset=['Total_Assets'])]           # shows the duplicated rows in the specific column

# to drop rows that contain duplicates
    df = df.loc[~df.duplicated(subset=['Total_Assets'])].copy        # '~' is inverse we are locating the inverse of the duplicates then storing that as new df






    
