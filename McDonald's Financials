import numpy as np             # linear algebra
import pandas as pd            # data processing
import matplotlib.pylab as plt          # visualizations that can be fine tuned 
import seaborn as sns          # visualizations that are more complex
plt.style.use('ggplot')        # setting the plotting style
pd.set_option('display.max_columns', 200)       # because pandas limits the number shown


# read/open the dataset using pd (pandas)
df = pd.read_csv('/kaggle/input/mcdonalds-financial-statements-2002-2022/McDonalds_Financial_Statements.csv')
    

# To understand the dataset, an overview
   df.shape           #(rows, columns)   
   df.head()          # to show a certain number of rows. default is 5 but can adjust
   df.columns         # to see the list of columns
   df.dtypes          # to see the object type in each column
   df.describe ()     # gives us the basic stats (mean, median, etc.) per column

# to prepare the data

# cleaning
    df.drop(['#specify name of column to drop']. axis=1, inplace=True)               # removes specified column, axis 0=row 1=column,inplace True=modify same df False=creates new df
    df = df[['Year', #'Market cap ($B)',                                             # every column with '#' is removed
         'Revenue ($B)', 
         'Earnings ($B)', #'P/E ratio',
       #'P/S ratio', #'P/B ratio', #'Operating Margin (%)', #'EPS ($)',
       #'Shares Outstanding ($B)', 
         'Cash on Hand ($B)', 
         'Dividend Yield (%)',
       #'Dividend (stock split adjusted) ($)', 
         'Net assets ($B)',
         'Total assets ($B)', 
         'Total debt ($B)', 
         'Total liabilities ($B)']].copy()                                              

# data type conversion
    df['Earnings ($B)'] = pd.to_numeric(df['Earnings ($B)'])                    # assuming the 'Earnings' column was in any other data type and we want to make it float

# renaming
    df = df.rename(columns={'Revenue ($B)': 'Revenue',                           # rewriting the df as the renamed df
                  'Earnings ($B)':'Earnings',                                    # removing spaces and symbols
                  'Cash on Hand ($B)':'Cash_On_Hand', 
                  'Dividend Yield (%)':'Dividend_Yield',
                  'Net assets ($B)': 'Net_Assets',
                  'Total assets ($B)':'Total_Assets',
                  'Total debt ($B)':'Total_Debt',
                  'Total liabilities ($B)':'Total_Liabilities'})

# checking for empty spaces
    df.isna().sum()                        # this will return number of empties per column

# checking for duplicates
    df.duplicated()                                          # true or false
    df.loc[df.duplicated()]                                  # locates the duplicates
    df.loc[df.duplicated(subset=['Total_Assets'])]           # shows the duplicated rows in the specific column

# to drop rows that contain duplicates
    df = df.loc[~df.duplicated(subset=['Total_Assets'])].copy        # '~' is inverse we are locating the inverse of the duplicates then storing that as new df



df['Net_Assets'].value_counts()            # to see the most common value in the column in desc order

# plotting a bar graph
ax = df['Net_Assets'].value_counts().head(10).plot(kind='bar', title='Top Net Assets')            # plots a bar graph using the va;ue counts limited to 10, ax allows us to edit the axis
ax.set_xlabel('Net Assets')
ax.set_ylabel('Count')


# plotting a histogram great way to analyze any colum
ax = df['Net_Assets'].plot(kind='hist', bins=20, title='Top Net Assets')            # plots a histogram using the Net Asset values, the more the bins the more the zoom
ax.set_xlabel('Net Assets')

# plotting a Kernel Density Estimation not as detailed as hist
ax = df['Net_Assets'].plot(kind='kde', title='Top Net Assets')            # plots a kde using the Net Asset values
ax.set_xlabel('Net Assets')


# plotting a dot-plot (scatter plot)                        # to see relationship between two numerical variables
df.plot(kind='scatter',
x='Total_Debt',
y='Earnings',
title='Total Debt vs Earnings Over The Years')              # each dot is a coordinate of the two variables' values in that row
plt.show()                                                  # display the plot. it's cleaner


# plotting a dot-plot now using seaborn (sns)               # has more features than pd
ax = sns.scatterplot(x='Total_Debt',
                    y='Earnings',
                    hue='Year',
                    data=df)
ax.set_title('Total Debt vs Earnings Over The Years')              
plt.show()

# pair plot
sns.pairplot(df.
            vars= ['Earnings', 'Total_Debt', 'Net Assets', 
                    'Total_Liabilities', 'Dividend_Yield']        # compares multiple variables
            hue='Year')
plt.show


# correlation between variables
df[['Earnings', 'Total_Debt', 'Net Assets', 
   'Total_Liabilities', 'Dividend_Yield']].dropna().corr()            # will show correlation. The closer to 1 the higher the correlation

# heatmap
df_corr = df[['Earnings', 'Total_Debt', 'Net Assets', 
   'Total_Liabilities', 'Dividend_Yield']].dropna().corr()
sns.heatmap(df_corr, annot=True)                                      # will show correlation as a heatmap more visual







